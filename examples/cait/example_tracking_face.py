# Python code generated by CAIT's Visual Programming Interface


import tkinter as tk
import threading, queue
import time
from numpy import datetime64
import cait.essentials
from datetime import datetime
face_coordinate = None
screen_center = None
greeted = None
x1 = None
follow_face = None
x2 = None
face_center = None
person = None
rotate_power = None
coordinates = None
name = None

# Lego Vars
lego_hub_name = "Robot Inventor: A8:E2:C1:95:22:45"
motors = {"wheels" : "motor_B",
    "scoop" : "motor_D",
    "cam" : "motor_F"}


"""Describe this function...
"""
message_queue = queue.Queue()
catch_ang = -116
drop_ang = -159

pAng, ang = 0,0
doSwitchAngle = threading.Event()
doGoLeft = threading.Event()
doStop = threading.Event()
def follow_face2(face_coordinate):
    global ang, pAng, message_queue, doSwitchAngle, catch_ang, drop_ang
    
        
    global lego_hub_name, motors
    global screen_center, greeted, x1, follow_face, x2, face_center, person, rotate_power, coordinates, name

    if not message_queue.empty():
        value = message_queue.get(block=False)

        ang = value
    if doSwitchAngle.is_set():
        ang = catch_ang if ang != catch_ang else drop_ang
        doSwitchAngle.clear()

    # screen_center = 640 / 2
    # x1 = face_coordinate[0]
    # x2 = face_coordinate[2]
    # face_center = x1 + (x2 - x1) / 2
    #rotate_power = cait.essentials.update_pid((screen_center - face_center))['value']
    #csucc = cait.essentials.control_motor_group('{"operation_list" :[{"hub_name": "Robot Inventor: A8:E2:C1:95:22:45", "motor_name": "motor_A", "power": "' + str(rotate_power) + '"},{"hub_name": "Robot Inventor: A8:E2:C1:95:22:45", "motor_name": "motor_E", "power": "' + str(rotate_power) + '"}]}')
    if ang != pAng:
        csucc = cait.essentials.set_motor_position(lego_hub_name, motors["scoop"], ang)
        print(ang)
        print(f'control was {csucc}')
    pAng = ang
def go_to_left():
    speed = 10
    duration = 3
    if doGoLeft.is_set():
        test = cait.essentials.set_motor_power(lego_hub_name, motors["wheels"], speed)
        doGoLeft.clear()
        threading.Thread(target=sleepThenSet, args=[doStop, 5]).start()


def sleepThenSet(ev, duration):
    time.sleep(duration)
    setEvent(ev)
def setEvent(ev):
    ev.set()

def setup():
    global lego_hub_name
    cait.essentials.initialize_component('vision', processor='oakd', mode=[["add_rgb_cam_node", 640, 360], ["add_rgb_cam_preview_node"],["add_nn_node_pipeline", "face_detection", "face-detection-retail-0004_openvino_2021.2_6shave.blob", 300, 300],["add_nn_node", "face_landmarks", "landmarks-regression-retail-0009_openvino_2021.2_6shave.blob", 48, 48], ["add_nn_node", "face_features", "mobilefacenet.blob", 112, 112]])
    print('setup vision')
    cait.essentials.initialize_component('control', [lego_hub_name])
    print('setup lego')
    success, msg = cait.essentials.initialize_pid(0.05, 0.00001, 0)
    print(f'was success {success}')
    print(f'msg was {msg}')
    
def main():
    global face_coordinate, screen_center, greeted, x1, follow_face, x2, face_center, person, rotate_power, coordinates, name, ang,doStop
    greeted = False
    follow_face = False
    while True:
        follow_face2(1)
        go_to_left()

        if doStop.is_set():
            test = cait.essentials.set_motor_power(lego_hub_name, motors["wheels"], 0)
            doStop.clear()


        # person = cait.essentials.recognize_face(processor='oakd')
        # cait.essentials.draw_recognized_face(person)
        # if(len(person['coordinates']) < 1):
        #     continue
        # coordinates = (person['coordinates'])[0]
        # name = (person['names'])[0]
        # if name == 'Unknown':
        #     print('following unknown')
     
        #     follow_face2(coordinates)
slider = None
btnSwitchAngle = None
btnGoLeft = None
def do_ui():
    global slider, btnSwitchAngle
    window = tk.Tk()
    slider = tk.Scale(window, from_=-360, to=360, tickinterval=1)
    slider.bind("<ButtonRelease-1>", push_slider_value)
    slider.pack()

    btnSwitchAngle = tk.Button(window, text="switch", command=switch_angle)
    btnSwitchAngle.pack()

    btnGoLeft = tk.Button(window, text="goLeft", command=goLeft)
    btnGoLeft.pack()
    window.mainloop()
def push_slider_value(event):
    global slider
    message_queue.put_nowait(slider.get())
def switch_angle():
    global doSwitchAngle
    doSwitchAngle.set()
def goLeft():
    global doGoLeft
    doGoLeft.set()

if __name__ == "__main__":
    
    x = threading.Thread(target=do_ui)
    x.start()
    #window.mainloop()
    setup()
    main()